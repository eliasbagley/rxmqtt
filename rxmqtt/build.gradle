// Manifest version information!
def versionMajor = 0
def versionMinor = 0
def versionPatch = 2
def versionBuild = 2

def version_code = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
def version_name = "${versionMajor}.${versionMinor}.${versionPatch}"

apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.google.code.gson:gson:2.5'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
}

////////////////////////
// Bintray configuration
////////////////////////

ext {
    bintrayRepo = 'maven'

    publishedGroupId = 'com.eliasbagley'
    libraryName = 'rxmqtt'
    artifact = 'rxmqtt'

    libraryDescription = 'RxJava Wrapper for MQTT'

    siteUrl = 'https://github.com/eliasbagley/rxmqtt'
    gitUrl = 'https://github.com/eliasbagley/rxmqtt.git'

    libraryVersion = version_name

    developerId = 'eliasbagley'
    developerName = 'Elias Bagley'
    developerEmail = 'elias.bagley@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

//////////////////
// Maven
//////////////////

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

/////////////////
// Bintray upload
/////////////////

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('credentials/bintray.properties').newDataInputStream())

bintray {
    // First try to read from local.properties
    user = properties.getProperty("BINTRAY_USERNAME")
    key = properties.getProperty("BINTRAY_APIKEY")
    def gpgpassphrase = properties.getProperty("BINTRAY_GPG_KEY")

    // If the properties aren't set in a properties file, load from environment (needed for CI)
    if (user == null) {
        user = System.getenv('BINTRAY_USERNAME')
    }
    if (key == null) {
        key = System.getenv('BINTRAY_APIKEY')
    }
    if (gpgpassphrase == null) {
        gpgpassphrase = System.getenv('BINTRAY_GPG_PASSPHRASE')
    }

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = libraryName
        userOrg = user
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            name = version_name
            desc = libraryDescription
            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
                passphrase = gpgpassphrase
            }
        }
    }
}

task('gitTag') {
    "git tag ${version_name}".execute([], project.rootDir)
    "git push --tags".execute([], project.rootDir)
}
