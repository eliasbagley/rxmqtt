// Manifest version information!
def versionMajor = 0
def versionMinor = 0
def versionPatch = 3
def versionBuild = 3

def version_code = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
def version_name = "${versionMajor}.${versionMinor}.${versionPatch}"

apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        // Fix a bug with duplicate includes with guava
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    dexOptions {
        dexInProcess = true
        incremental = true
        preDexLibraries = false
        javaMaxHeapSize "4G"
        threadCount 4
    }

    testOptions {
        unitTests.all {
        // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }
}

ext {
    supportLibVersion = '23.0.1'
    espressoVersion = '2.2.1'
    androidTestVersion = '0.4.1'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.google.code.gson:gson:2.5'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'

    // Testing dependencies
//    androidTestCompile "com.android.support.test.espresso:espresso-contrib:${espressoVersion}"
//    androidTestCompile "com.android.support.test.espresso:espresso-core:${espressoVersion}"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.2"
    androidTestCompile "com.google.dexmaker:dexmaker:1.2"
    androidTestCompile "com.android.support.test:rules:${androidTestVersion}"
    androidTestCompile "com.android.support.test:runner:${androidTestVersion}"
//    androidTestCompile "com.android.support:support-annotations:${supportLibVersion}"
    androidTestCompile 'com.google.truth:truth:0.28'
    androidTestCompile 'junit:junit:4.12'
//    androidTestCompile 'org.mockito:mockito-core:2.0.2-beta'

    testCompile 'com.google.truth:truth:0.28'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.2-beta'
}

////////////////////////
// Bintray configuration
////////////////////////

ext {
    bintrayRepo = 'maven'

    publishedGroupId = 'com.eliasbagley'
    libraryName = 'rxmqtt'
    artifact = 'rxmqtt'

    libraryDescription = 'RxJava Wrapper for MQTT'

    siteUrl = 'https://github.com/eliasbagley/rxmqtt'
    gitUrl = 'https://github.com/eliasbagley/rxmqtt.git'

    libraryVersion = version_name

    developerId = 'eliasbagley'
    developerName = 'Elias Bagley'
    developerEmail = 'elias.bagley@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

//////////////////
// Maven
//////////////////

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

/////////////////
// Bintray upload
/////////////////

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}


bintray {
    def credentialsFile = 'credentials/bintray.properties'
    if (file(credentialsFile).exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file(credentialsFile).newDataInputStream())

        user = properties.getProperty("BINTRAY_USERNAME")
        key = properties.getProperty("BINTRAY_APIKEY")
    } else {
        user = System.getenv('BINTRAY_USERNAME')
        key = System.getenv('BINTRAY_APIKEY')
    }

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = libraryName
        userOrg = user
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            name = version_name
            desc = libraryDescription
            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
                passphrase = ''
            }
        }
    }
}

task('gitTag') {
    "git tag ${version_name}".execute([], project.rootDir)
    "git push --tags".execute([], project.rootDir)
}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
    tasks.getByName('assemble').dependsOn variant.assemble
}


// Log the tests in the console rather than having to view the HTML report
tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}
